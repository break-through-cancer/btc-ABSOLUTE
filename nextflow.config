docker {
    enabled = true
}

includeConfig 'conf/base.config'

params {
    samplesheet = null
    outdir = null
    phase = null
    
    publish_dir_mode = 'copy'
    
    max_memory = '768.GB'
    max_cpus = 192
    max_time = '48.h'
    
    seg_data = "GBM1.DFCI4.S1.capseg.txt"
    indel_data = "GBM1.DFCI4.S1.indel"
    snp_data = "GBM1.DFCI4.S1.snp"
}

includeConfig 'conf/modules.config'

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}